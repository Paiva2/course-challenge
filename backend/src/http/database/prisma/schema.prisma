generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String @unique @db.VarChar(100)
  email    String @unique @db.VarChar(100)
  password String @db.VarChar(500)
  role     String @default("student") @db.VarChar(20)

  wallet           Wallet?
  payments         PendingPayments[]
  courses          Course[]
  questions        Question[]
  answers          QuestionAnswer[]
  finishedPayments FinishedPayments[]

  @@map("user")
}

model Wallet {
  id        String   @id @default(uuid())
  total     Decimal  @db.Decimal(10, 2)
  updatedAt DateTime @default(now())

  fkUser String @unique @db.VarChar(100)

  user User? @relation(fields: [fkUser], references: [id], onDelete: Cascade)

  @@map("wallet")
}

model Course {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(50)
  duration    Int      @db.Integer()
  active      Boolean  @default(true) @db.Boolean()
  description String   @db.VarChar(500)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  questions       Question[]
  questionsAnswer QuestionAnswer[]

  fkProfessor String @db.VarChar(100)

  user User? @relation(fields: [fkProfessor], references: [id], onDelete: Cascade)

  @@map("course")
}

model Question {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  question  String   @db.VarChar(500)
  name      String   @db.VarChar(100)

  answers QuestionAnswer[]

  fkStudent String @db.VarChar(100)
  fkCourse  String @db.VarChar(100)

  user   User?   @relation(fields: [fkStudent], references: [id], onDelete: Cascade)
  course Course? @relation(fields: [fkCourse], references: [id], onDelete: Cascade)

  @@map("question")
}

model QuestionAnswer {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  answer    String   @db.VarChar(500)
  name      String   @db.VarChar(100)

  fkQuestion  String @db.VarChar(100)
  fkProfessor String @db.VarChar(100)
  fkCourse    String @db.VarChar(100)

  question Question? @relation(fields: [fkQuestion], references: [id], onDelete: Cascade)
  user     User?     @relation(fields: [fkProfessor], references: [id], onDelete: Cascade)
  course   Course?   @relation(fields: [fkCourse], references: [id], onDelete: Cascade)

  @@map("question_answer")
}

enum PaymentReason {
  course
  questionAnswered
}

model PendingPayments {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  value     Decimal       @db.Decimal(10, 2)
  reason    PaymentReason

  fkProfessor String @db.VarChar(100)

  User User? @relation(fields: [fkProfessor], references: [id], onDelete: Cascade)

  @@map("pending_payments")
}

model FinishedPayments {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  value       Decimal       @db.Decimal(10, 2)
  reason      PaymentReason
  fkProfessor String        @db.VarChar(100)

  User User? @relation(fields: [fkProfessor], references: [id], onDelete: Cascade)

  @@map("finished_payments")
}
